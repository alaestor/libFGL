# Tuprules.tup
### PROJECT SPECIFIC SETTINGS

ROOT=$(TUP_CWD)
TEST_DIR=$(ROOT)/test
TEST_OUT_DIR=$(TEST_DIR)/output
TEST_OBJ_DIR=$(TEST_OUT_DIR)/obj
TEST_BIN_DIR=$(TEST_OUT_DIR)/bin
TEST_ASM_DIR=$(TEST_OUT_DIR)/asm

## these are N/A because FGLLIB should be header-only
#		OBJ_DIR=$(ROOT)/obj
#		BIN_DIR=$(ROOT)/bin
#		ASM_DIR=$(ROOT)/asm


# These directories should be local and included with the project!
# System-specific directories are defined in the personal tup.config
# Put examples that pertain to the project in the tup.config.DEFUALT

PROJECT_LANGUAGE_SPECIFICATION= -std=c++20
PROJECT_WARNING= -Winvalid-imported-macros
PROJECT_CODEGEN= -fno-omit-frame-pointer -fno-rtti
PROJECT_LINKAGE= -shared-libgcc
PROJECT_INCLUDES= -I"$(ROOT)/include/"
PROJECT_LIBRARIES=



#########################
####	DO NOT EDIT BELLOW HERE
### Preferences and system-specific directories are defined in tup.config
### You may override these rules by re-definition in a lower Tuprules.tup
### Overriding these rules is discouraged
## No user-servicable parts inside
## if (removed) warranty = static_cast<void*>(removed);
##########



ifndef MODE
	error CONFIG_MODE must be defined in tup.config
endif
ifndef WARN
	error CONFIG_WARN must be defined in tup.config
endif
ifndef WARN_PREFS
	error CONFIG_WARN_PREFS must be defined in tup.config
endif
ifndef CODE_PREFS
	error CONFIG_CODE_PREFS must be defined in tup.config
endif
ifndef LINK_PREFS
	error CONFIG_LINK_PREFS must be defined in tup.config
endif



#######
##
##	WARNING FLAG COMPOSITION
##
#######



GCC_WARNING_MINIMUM= -Wall -Wextra -Wundef -Wnull-dereference

GCC_WARNING_RELAXED= -Wpedantic -pedantic-errors -Weffc++ -Wnoexcept -Wuninitialized -Wunused -Wunused-parameter -Winit-self -Wconversion -Wuseless-cast -Wextra-semi -Wsuggest-final-types -Wsuggest-final-methods -Wsuggest-override  -Wformat-signedness -Wno-format-zero-length -Wmissing-include-dirs -Wshift-overflow=2 -Walloc-zero -Walloca -Wsign-promo -Wconversion -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wshadow -Wshadow=local -Wmultiple-inheritance -Wvirtual-inheritance -Wno-virtual-move-assign -Wunsafe-loop-optimizations -Wnormalized -Wpacked -Wredundant-decls -Wmismatched-tags -Wredundant-tags -Wctor-dtor-privacy -Wdeprecated-copy-dtor -Wstrict-null-sentinel -Wold-style-cast -Woverloaded-virtual -Wzero-as-null-pointer-constant -Wconditionally-supported

GCC_WARNING_STRICT= -Werror=pedantic -Wwrite-strings -Wmultiple-inheritance -Wunused-const-variable=2 -Wdouble-promotion -Wpointer-arith -Wcast-align=strict -Wcast-qual -Wconversion -Wsign-conversion -Wimplicit-fallthrough=1 -Wmisleading-indentation -Wdangling-else -Wdate-time -Wformat=2 -Wformat-overflow=2 -Wformat-signedness -Wformat-truncation=2 -Wswitch-default -Wswitch-enum -Wstrict-overflow=5 -Wstringop-overflow=4 -Warray-bounds=2 -Wattribute-alias=2 -Wcatch-value=2 -Wplacement-new=2 -Wtrampolines

ifeq (@(WARN),MINIMUM)
	GCC_WARNING= $(GCC_WARNING_MINIMUM)
else
	ifeq (@(WARN),RELAXED)
		GCC_WARNING= $(GCC_WARNING_MINIMUM) $(GCC_WARNING_RELAXED)
	else
		ifeq (@(WARN),STRICT)
			GCC_WARNING= $(GCC_WARNING_MINIMUM) $(GCC_WARNING_RELAXED) $(GCC_WARNING_STRICT)
		else
			error tup.config CONFIG_WARN must be either MINIMUM or RELAXED or STRICT
		endif
	endif
endif

GCC_WARNING+= @(WARN_PREFS)



#######
##
##	CODE GENERATION FLAGS
##
#######



GCC_CODEGEN=
GCC_LINKAGE=

ifeq (@(MODE),DEBUG)
	GCC_CODEGEN+= -Og -g -fstrict-aliasing -fno-omit-frame-pointer -fstack-check -ftrapv -fwrapv -fverbose-asm -femit-class-debug-always -fanalyzer
else
	ifeq (@(MODE),PRODUCTION)
		GCC_CODEGEN+= -Ofast -march=native -fgcse-las -fgcse-sm -fdeclone-ctor-dtor -fdevirtualize-speculatively -fdevirtualize-at-ltrans -ftree-loop-im -fivopts -ftree-loop-ivcanon -fira-hoist-pressure -fsched-pressure -fsched-spec-load -fipa-pta -flto -ffat-lto-objects -fno-enforce-eh-specs -fstrict-enums
		GCC_LINKAGE+= -s
	else
		error tup.config CONFIG_MODE must be either DEBUG or PRODUCTION
	endif
endif

GCC_CODEGEN+= $(PROJECT_INCLUDES) @(CODE_PREFS)
GCC_LINKAGE+= $(PROJECT_LIBRARIES) @(LINK_PREFS)



#######
##
##	FLAGS AND RULE MACRO COMPOSITION
##
#######



COMPILER= g++
WARNING= $(GCC_WARNING) $(PROJECT_WARNING)
CODEGEN= $(GCC_CODEGEN) $(PROJECT_CODEGEN)
LINKAGE= $(GCC_LINKAGE) $(PROJECT_LINKAGE)

LANGUAGE= $(PROJECT_LANGUAGE_SPECIFICATION)

C_FLAGS= $(LANGUAGE) $(CODEGEN) $(GCC_WARNING) @(PERSONAL_INCLUDE_DIRS)
L_FLAGS= $(LANGUAGE) $(CODEGEN) $(CODEGEN) @(PERSONAL_LIBRARY_DIRS) @(PERSONAL_LIBRARY_LINK)
CL_FLAGS= $(LANGUAGE) $(GCC_WARNING) $(CODEGEN) @(PERSONAL_INCLUDE_DIRS) @(PERSONAL_LIBRARY_DIRS) @(PERSONAL_LIBRARY_LINK)

# preprocessor output
!PRE = |> ^ [PRE] %b^ $(COMPILER) $(C_FLAGS) -E -o %o %f |>

# assembly output
!ASM = |> ^ [ASM] %b^ $(COMPILER) $(C_FLAGS) -S -o %o %f |>

# compile
!C = |> ^ [C] %b^ $(COMPILER) $(C_FLAGS) -c -o %o %f |>

# link
!L = |> ^ [L] %b^ $(COMPILER) $(L_FLAGS) -o %o %f |>

# one-step compile and link
!CL = |> ^ [CL] %b^ $(COMPILER) $(CL_FLAGS) -o %o %f |>

# run test program
!RUN_TEST = |> ^ [TEST] %b^ %f |>

# passthrough input; useful for mapping tup groups
!PASSTHROUGH = |> |>
